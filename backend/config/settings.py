"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import logging
import os
import sys
from pathlib import Path
import environ
import datetime

TESTING = \
    sys.argv[0].endswith('/pytest') or\
    sys.argv[0].endswith('/py.test') or\
    sys.argv[0].endswith('/ptw') or\
    sys.argv[0].endswith('/_jb_pytest_runner.py')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
PROJECT_ROOT = Path(__file__).absolute().parent
BASE_DIR = PROJECT_ROOT.parent

env = environ.Env()
dot_env_path = BASE_DIR / '.env'
if dot_env_path.exists():
    env.read_env(str(dot_env_path))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/
SECRET_KEY = env.str('SECRET_KEY', '--development--')
JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(minutes=30),
    'REFRESH_JWT_EXPIRATION_DELTA': datetime.timedelta(hours=1),
    'JWT_ALGORITHM': 'HS256'
}
RESET_PASSWORD_TIME = datetime.timedelta(days=1)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', False)

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['127.0.0.1', 'localhost'])
ALLOWED_HOSTS += 'https://dmhmqtxqquo0k.cloudfront.net'
ALLOWED_HOSTS += 'https://d2tl0f1bfqx7sq.cloudfront.net'
ALLOWED_HOSTS += 'https://d1g8hmc7oq7atg.cloudfront.net'
ALLOWED_HOSTS += 'https://duizbah5jrgl4.cloudfront.net'
ALLOWED_HOSTS += 'https://d2pejlc9g1hc7x.cloudfront.net'
ALLOWED_HOSTS += 'https://d1mxnyh9j04oec.cloudfront.net'


CSRF_TRUSTED_ORIGINS = [
    env.str("SITE_SUB_DOMAIN", default=''),
    'https://dmhmqtxqquo0k.cloudfront.net',
    'https://d2tl0f1bfqx7sq.cloudfront.net',
    'https://d1g8hmc7oq7atg.cloudfront.net',
    'https://duizbah5jrgl4.cloudfront.net',
    'https://d2pejlc9g1hc7x.cloudfront.net',
    'https://d1mxnyh9j04oec.cloudfront.net'
]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    'https://dmhmqtxqquo0k.cloudfront.net',
    'https://d2tl0f1bfqx7sq.cloudfront.net',
    'https://d1g8hmc7oq7atg.cloudfront.net',
    'https://duizbah5jrgl4.cloudfront.net',
    'https://d2pejlc9g1hc7x.cloudfront.net',
    'https://d1mxnyh9j04oec.cloudfront.net'
]

FCS_ENDPOINT = env.str('FCS_ENDPOINT', default='')
FCS_APIKEY = env.str('FCS_APIKEY', default='')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_swagger',
    'storages',
    'account',
    'app',
    "psqlextra",
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

AUTH_USER_MODEL = 'account.User'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': str(BASE_DIR / 'db.sqlite3'),
        'TEST': {
            'CHARSET': 'UTF8',
            'NAME': ':memory:',
        },
    }
}
if not TESTING and 'DATABASE_URL' in env:
    DATABASES['default'].update(env.db())
    DATABASES['default']['ENGINE'] = 'psqlextra.backend'
    # support Unix domain socket
    if 'DATABASE_SOCKET' in env:
        DATABASES['default']['HOST'] = env.str('DATABASE_SOCKET')


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ja'
TIME_ZONE = 'Asia/Tokyo'
USE_I18N = True
USE_L10N = True
USE_TZ = False

# rest_framework settings
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': (
        # 'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.IsAdminUser',
        # 'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_PARSER_CLASSES': (
        # 'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.JSONParser',
    ),
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'rid': {
            '()': 'utils.custom_logging.RequestIdLoggingFilter',
        },
        # 'login_id': {
        #     '()': 'utils.custom_logging.LoginIdLoggingFilter',
        # },
        # 'city_code': {
        #     '()': 'utils.custom_logging.CityCodeLoggingFilter',
        # },
        'ip': {
            '()': 'utils.custom_logging.IpAddressForLoggingFilter',
        },
        'tid': {
            '()': 'utils.custom_logging.TaskIdLoggingFilter',
        },
    },
    'formatters': {
        # 本当は django.server にも rid, cn を追加したかったが、console, app と同じ方法ではできなかった。
        # おそらく全ての Middleware より外側でログを出力しているためではないかと考えている。
        # X-Request-Id を前段コンポーネント (Nginx or CloudFront) で発行しログに書けば
        # リクエストIDに対する応答コードまで追跡できるようになる。
        # 前段に ALB があるなら X-Amzn-Trace-Id が付与され、これを rid とするため問題ない。
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] {message}',
            'style': '{',
        },
        # 予期しないエラー用: stack trace を含める
        'console': {
            'format': '[%(asctime)s] [%(levelname)s] [rid=%(rid)s] [ip=%(ip)s] '
                      '%(pathname)s:%(lineno)d '
                      '%(message)s'
        },
        # アプリケーションログ用: stack trace は含めない
        'app': {
            'format': '[%(asctime)s] [%(levelname)s] [rid=%(rid)s] [ip=%(ip)s] '
                      '%(message)s'
        },
        # バッチログ用
        'task': {
            'format': '[%(asctime)s] [%(levelname)s] [tid=%(tid)s] %(message)s'
        },
        'debug': {
            'format': '[%(asctime)s] [%(levelname)s] '
                      '%(pathname)s:%(lineno)d '
                      '%(message)s'
        }
    },
    'handlers': {
        'console': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'console',
            'filters': ['rid', 'ip'],
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'app': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'app',
            'filters': ['rid', 'ip'],
        },
        'task': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'task',
            'filters': ['tid'],
        },
        'debug': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'debug',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'ERROR',
        },
        'django.server': {
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'app': {
            'handlers': ['app'],
            'level': 'INFO',
        },
        'account': {
            'handlers': ['app'],
            'level': 'INFO',
        },
        'task': {
            'handlers': ['task'],
            'level': 'INFO',
        },
        'urllib3': {
            'handlers': ['debug'],
            'level': 'DEBUG' if DEBUG else 'INFO'
        }
    }
}

# requests の通信をすべて出力する
if DEBUG:
    requests_log = logging.getLogger("urllib3")
    requests_log.setLevel(logging.DEBUG)

BASE_URL = env.str('BASE_URL', '')

AWS_REGION_NAME = 'ap-northeast-1'
AWS_SES_CONFIGURATION_SET_NAME = env.str('AWS_SES_CONFIGURATION_SET_NAME', '')

# AWS S3
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
AWS_STORAGE_BUCKET_NAME = env.str('AWS_STORAGE_BUCKET_NAME', default='')
AWS_ACCESS_KEY_ID = env.str('AWS_ACCESS_KEY_ID', default='')
AWS_SECRET_ACCESS_KEY = env.str('AWS_SECRET_ACCESS_KEY', default='')

SENDER_EMAIL = 'info@lg-pwd.jp'

MIRAIRO_CONNECT_API_BASE_URL = env.str('MIRAIRO_CONNECT_API_BASE_URL')

HTP_API_URL = env.str('HTP_API_URL', '')
HTP_HTML_URL = env.str('HTP_HTML_URL', '')